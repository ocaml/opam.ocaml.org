# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 

# m h  dom mon dow   command
  0 1  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opam2 update-from-git.sh opam2 master
#  0 2  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opam update-from-git.sh opam 1.3
# 30 2  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opamfu update-from-git.sh opamfu
#  0 3  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opam2web update-from-git.sh opam2web
 30 3  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opam2web2 update-from-git.sh opam2web2 master
  0 *  *   *   *     /home/opam/local/bin/cron-wrapper.sh update-opam-repo update-opam-repo.sh
# ADD TO root's crontab:
# 0 0  1   *   *     sh -c 'D=$(date -d yesterday +%Y-%m); mv /home/opam/var/log/access.log /home/opam/var/log/access-$D.log; kill -USR1 $(cat /var/run/nginx.pid); xz /home/opam/var/log/access-$D.log --stdout >/home/opam/var/log/xz/access-$D.log.xz'
